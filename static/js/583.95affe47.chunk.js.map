{"version":3,"file":"static/js/583.95affe47.chunk.js","mappings":"6OAAaA,EAAU,mCAAG,WAAMC,GAAN,yFACCC,MAAM,sCAAD,OACYD,EADZ,sDADN,WAChBE,EADgB,QAKRC,GALQ,sBAMd,IAAIC,MAAM,oBANI,uBASHF,EAASG,OATN,cAShBC,EATgB,yBAUfA,EAAKC,MAAQ,IAVE,2CAAH,sD,2BCiDvB,EA3Ca,WACX,IAAQP,GAAaQ,EAAAA,EAAAA,MAAbR,SACR,GAA8BS,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBN,GAAW,GAFK,SAGSZ,EAAWC,GAHpB,OAGVkB,EAHU,OAIhBL,EAAUK,GAJM,gDAMhBH,EAAS,KAAMI,SANC,yBAQhBR,GAAW,GARK,4EAAH,qDAYjBM,GACD,GAAE,CAACjB,IAEJ,IAAMoB,EAAYR,GAAUS,OAAOC,KAAKV,GAAQW,OAAS,EAEzD,OACE,gCACGb,IAAW,SAACc,EAAA,EAAD,IACXV,IAAS,SAAC,IAAD,IACTM,IACC,wBACGR,EAAOa,KAAI,SAAAC,GAAK,OACf,2BACE,gBAAKC,IAAG,wCAAmCD,EAAME,cAAgBC,IAAKH,EAAMI,QAC5E,uBAAIJ,EAAMI,QACV,uBAAIJ,EAAMK,cAHHL,EAAMM,GADA,QAW1B,C,mEC/CY5B,EAAQ,SAAC,GAAe,IAAde,EAAa,EAAbA,QACrB,OACE,+BACE,uBAAIA,KAGT,C,mFCHYK,EAAS,WACpB,OACE,0BACE,SAAC,KAAD,CACES,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,cAI5D,C","sources":["services/ActorsList.jsx","components/Cast/Cast.jsx","components/Error.jsx","components/Loader.jsx"],"sourcesContent":["export const ActorsList = async moviesId => {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${moviesId}/credits?api_key=b6e6c21ac077893d8efa67c324fb45b8`\n    );\n  \n    if (!response.ok) {\n      throw new Error('some troubles...');\n    }\n  \n    const data = await response.json();\n    return data.cast || [];\n  };\n  ","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { ActorsList } from 'services/ActorsList';\nimport { Loader } from 'components/Loader';\nimport { Error } from 'components/Error';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchActors = async () => {\n      try {\n        setLoading(true);\n        const actorsData = await ActorsList(moviesId);\n        setActors(actorsData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchActors();\n  }, [moviesId]);\n\n  const showPosts = actors && Object.keys(actors).length > 0;\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <Error />}\n      {showPosts && (\n        <ul>\n          {actors.map(actor => (\n            <li key={actor.id}>\n              <img src={`https://image.tmdb.org/t/p/w92${actor.profile_path}`} alt={actor.name} />\n              <p>{actor.name}</p>\n              <p>{actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;","export const Error = ({message}) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\n","import React from 'react';\nimport { ColorRing } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div>\n      <ColorRing\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </div>\n  );\n};\n"],"names":["ActorsList","moviesId","fetch","response","ok","Error","json","data","cast","useParams","useState","loading","setLoading","actors","setActors","error","setError","useEffect","fetchActors","actorsData","message","showPosts","Object","keys","length","Loader","map","actor","src","profile_path","alt","name","character","id","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}